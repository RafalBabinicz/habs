Index: habs/haskell-monad-logger/src/monad-logger-0.3.6/Control/Monad/Logger.hs
===================================================================
--- habs.orig/haskell-monad-logger/src/monad-logger-0.3.6/Control/Monad/Logger.hs
+++ habs/haskell-monad-logger/src/monad-logger-0.3.6/Control/Monad/Logger.hs
@@ -86,7 +86,7 @@ import Control.Monad.IO.Class (MonadIO (
 import Control.Monad.Trans.Resource (MonadResource (liftResourceT), MonadThrow, monadThrow)
 #if MIN_VERSION_resourcet(1,1,0)
 import Control.Monad.Trans.Resource (throwM)
-import Control.Monad.Catch (MonadCatch (..))
+import Control.Monad.Catch (MonadCatch (..), MonadMask (..))
 #endif
 
 import Control.Monad.Trans.Identity ( IdentityT)
@@ -276,6 +276,8 @@ instance MonadThrow m => MonadThrow (NoL
 instance MonadCatch m => MonadCatch (NoLoggingT m) where
     catch (NoLoggingT m) c =
         NoLoggingT $ m `catch` \e -> runNoLoggingT (c e)
+
+instance MonadMask m => MonadMask (NoLoggingT m) where
     mask a = NoLoggingT $ mask $ \u -> runNoLoggingT (a $ q u)
       where q u (NoLoggingT b) = NoLoggingT $ u b
     uninterruptibleMask a =
@@ -347,6 +349,7 @@ instance MonadThrow m => MonadThrow (Log
 instance MonadCatch m => MonadCatch (LoggingT m) where
   catch (LoggingT m) c =
       LoggingT $ \r -> m r `catch` \e -> runLoggingT (c e) r
+instance MonadMask m => MonadMask (LoggingT m) where
   mask a = LoggingT $ \e -> mask $ \u -> runLoggingT (a $ q u) e
     where q u (LoggingT b) = LoggingT (u . b)
   uninterruptibleMask a =
